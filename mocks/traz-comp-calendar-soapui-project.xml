<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="8c4b018e-de28-4260-94e2-4e45f9430fe2" activeEnvironment="Default" name="traz-comp-calendar" resourceRoot="" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="557d2ec1-618a-46a8-9c77-c348f881987c" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost</con:endpoint></con:endpoints><con:resource name="" path="" id="184b27d6-72de-47bd-8986-e519024ccc8f"><con:settings/><con:parameters/><con:method name="1" id="208f1489-e20d-41ba-972d-b98c45ef7b71" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="10488eb2-2876-4b0b-b7a1-3c5cbb922269" mediaType="application/json"><con:settings/><con:endpoint>http://localhost</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="497713ff-e4e3-491a-8901-d9f174d8ffe8" port="8080" path="/" host="DESKTOP-OT975NT" name="diasNoLaborables" docroot=""><con:settings/><con:properties/><con:restMockAction name="/getDiasNoLaborables" method="GET" resourcePath="/getDiasNoLaborables" id="ebcb13f0-20ae-4148-aca3-3da5b4ea34a3"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="diasNoLaborables" id="751b6102-90fd-4b89-8f75-73c021ba1ea7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"eventos":{
		"evento": [
			{
				"titulo" : "Cortar ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector A",
				"dia_incicio" : "2020-03-26",
				"hora_inicio" : "17:00",
				"hora_duracion" : "05:00",
				"dia_fin" : "2020-03-26"
			},
			{
				"titulo" : "Pelar ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector B",
				"dia_incicio" : "2020-03-26",
				"hora_inicio" : "11:00",
				"hora_duracion" : "04:00",
				"dia_fin" : "2020-03-26"
			},
			{
				"titulo" : "Mover ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector C",
				"dia_incicio" : "2020-03-27",
				"hora_inicio" : "11:00",
				"hora_duracion" : "03:00",
				"dia_fin" : "2020-03-27"
			}
		]	
	}
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="22f6b685-8faa-4a01-aea3-ea09f2a0a264" port="8080" path="/" host="DESKTOP-OT975NT" name="eventos"><con:settings/><con:properties/><con:restMockAction name="/getEventos" method="GET" resourcePath="/getEventos" id="1368673f-6cbc-44c3-b701-7bfce6727d63"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="eventos" id="c84c730c-ee20-4f54-b10e-f05ccc9c63b3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"eventos":{
		"evento": [
			{
				"titulo" : "Cortar ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector A",
				"dia_incicio" : "2020-07-03",
				"hora_inicio" : "18:00",
				"hora_duracion" : "05:00",
				"dia_fin" : "2020-07-03"
			},
			{
				"titulo" : "Pelar ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector B",
				"dia_incicio" : "2020-07-04",
				"hora_inicio" : "11:00",
				"hora_duracion" : "04:00",
				"dia_fin" : "2020-07-04"
			},
			{
				"titulo" : "Mover ajo",
				"descripcion" : "Cortar todos las cabezas de ajos del sector C",
				"dia_incicio" : "2020-07-05",
				"hora_inicio" : "11:00",
				"hora_duracion" : "03:00",
				"dia_fin" : "2020-07-05"
			}
		]	
	}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getDiasNoLaborables" method="GET" resourcePath="/getDiasNoLaborables" id="f8b7d532-cfe7-4592-9e95-0d20c2117238"><con:settings/><con:defaultResponse>diasNoLaborables</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="diasNoLaborables" id="f9336175-707e-4e4a-9658-e4d1ad813ea6" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"dias":{
		"dia": [
			{
				"fecha" : "2020-07-12"
			},
			{
				"fecha" : "2020-07-13"
			}
		]	
	}
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>